version: '3'
services:
  #PHP Container
  app:
    image: ${PHP_IMAGE}
    container_name: openmage-app
    tty: true
    user: "devilbox:devilbox"
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./.docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    depends_on:
      - database
    environment:
      - ENABLE_SENDMAIL=true
      - XDEBUG_CONFIG=remote_connect_back=1 remote_enable=1 idekey=phpstorm
      - MAGE_IS_DEVELOPER_MODE=1
    networks:
      - app-network

  #Nginx Container
  webserver:
    image: nginx:alpine
    container_name: openmage-webserver
    tty: true
    working_dir: /var/www
    environment:
      APP_HOST: openmage-app
    ports:
      - "${WEBSERVER_HOST_PORT}:80"
    volumes:
      - ./:/var/www
      - ./.docker/nginx/app.template:/etc/nginx/app.template
      - ./.docker/nginx/conf.sh:/etc/nginx/conf.sh
    depends_on:
      - app
    entrypoint:
      - /etc/nginx/conf.sh
    command: nginx -g 'daemon off;'
    networks:
      - app-network

  #MariaDB Container
  database:
    image: mariadb:10.3-bionic
    container_name: openmage-database
    tty: true
    environment:
      MYSQL_DATABASE: magento
      MYSQL_ROOT_PASSWORD: secret
    working_dir: /media
    volumes:
      - dbdata:/var/lib/mysql/
      - ./.docker/mysql/sqls:/media
    networks:
      - app-network

  #PhpMyAdmin Container
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: openmage-phpmyadmin
    environment:
      PMA_HOST: openmage-database
      PMA_USER: root
      PMA_PASSWORD: secret
    ports:
      - "8303:80"
    depends_on:
      - database
    networks:
      - app-network
    volumes:
      - ./.docker/phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
      - ./.docker/phpmyadmin/php/php-phpmyadmin.ini:/usr/local/etc/php/conf.d/php-phpmyadmin.ini

  #Node Container
  node:
    image: mateusmonteiro/gulp-sass:1.0.0
    container_name: openmage-node
    tty: true
    user: "node:node"
    volumes:
      - ./:/var/www
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
